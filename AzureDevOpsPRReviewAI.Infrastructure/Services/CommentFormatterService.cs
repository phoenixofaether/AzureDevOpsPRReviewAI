namespace AzureDevOpsPRReviewAI.Infrastructure.Services
{
    using System.Text;
    using AzureDevOpsPRReviewAI.Core.Interfaces;
    using AzureDevOpsPRReviewAI.Core.Models;
    using Microsoft.Extensions.Logging;

    public class CommentFormatterService : ICommentFormatterService
    {
        private readonly ILogger<CommentFormatterService> logger;

        public CommentFormatterService(ILogger<CommentFormatterService> logger)
        {
            this.logger = logger;
        }

        public FormattedComment FormatReviewComment(ReviewComment comment, string requestId)
        {
            var formattedContent = new StringBuilder();

            // Add severity icon and header
            var severityIcon = this.GetSeverityIcon(comment.Severity);
            var categoryBadge = this.GetCategoryBadge(comment.Category);

            formattedContent.AppendLine($"{severityIcon} **{comment.Severity}** {categoryBadge}");
            formattedContent.AppendLine();

            // Add main comment content
            formattedContent.AppendLine(comment.Content);

            // Add file and line reference if available
            if (!string.IsNullOrEmpty(comment.FilePath))
            {
                formattedContent.AppendLine();
                if (comment.LineNumber.HasValue)
                {
                    formattedContent.AppendLine($"üìç **File:** `{comment.FilePath}` (Line {comment.LineNumber})");
                }
                else
                {
                    formattedContent.AppendLine($"üìç **File:** `{comment.FilePath}`");
                }
            }

            // Add documentation links based on category
            var docLinks = this.GetDocumentationLinks(comment.Category);
            if (docLinks.Count > 0)
            {
                formattedContent.AppendLine();
                formattedContent.AppendLine("**üìö Resources:**");
                foreach (var link in docLinks)
                {
                    formattedContent.AppendLine($"- {link}");
                }
            }

            // Add AI attribution footer
            formattedContent.AppendLine();
            formattedContent.AppendLine("---");
            formattedContent.AppendLine($"ü§ñ *Generated by AI Code Review* | Request ID: `{requestId}`");

            return new FormattedComment
            {
                Content = formattedContent.ToString().Trim(),
                FilePath = comment.FilePath,
                LineNumber = comment.LineNumber,
                Severity = comment.Severity,
                Category = comment.Category,
                Metadata = 
                {
                    ["RequestId"] = requestId,
                    ["OriginalCategory"] = comment.Category.ToString(),
                    ["OriginalSeverity"] = comment.Severity.ToString()
                }
            };
        }

        public List<FormattedComment> FormatAnalysisResults(CodeAnalysisResult analysisResult)
        {
            var formattedComments = new List<FormattedComment>();

            // Create summary comment first
            var summaryContent = this.FormatSummaryComment(analysisResult);
            var summaryComment = new FormattedComment
            {
                Content = summaryContent,
                Severity = ReviewSeverity.Info,
                Category = ReviewCategory.General,
                IsThreadRoot = true,
                Metadata = 
                {
                    ["RequestId"] = analysisResult.RequestId,
                    ["CommentType"] = "Summary",
                    ["TotalComments"] = analysisResult.Comments.Count
                }
            };
            formattedComments.Add(summaryComment);

            // Format individual review comments
            foreach (var comment in analysisResult.Comments)
            {
                var formattedComment = this.FormatReviewComment(comment, analysisResult.RequestId);
                formattedComments.Add(formattedComment);
            }

            this.logger.LogInformation(
                "Formatted {CommentCount} review comments for request {RequestId}",
                formattedComments.Count,
                analysisResult.RequestId);

            return formattedComments;
        }

        public string FormatSummaryComment(CodeAnalysisResult analysisResult)
        {
            var summary = new StringBuilder();

            summary.AppendLine("## ü§ñ AI Code Review Summary");
            summary.AppendLine();

            if (!analysisResult.IsSuccessful)
            {
                summary.AppendLine("‚ùå **Analysis Failed**");
                summary.AppendLine($"Error: {analysisResult.ErrorMessage}");
                return summary.ToString();
            }

            // Statistics
            var commentsByCategory = analysisResult.Comments.GroupBy(c => c.Category).ToList();
            var commentsBySeverity = analysisResult.Comments.GroupBy(c => c.Severity).ToList();

            summary.AppendLine($"üìä **Analysis Results:** Found **{analysisResult.Comments.Count}** review comments");
            summary.AppendLine();

            // Severity breakdown
            if (commentsBySeverity.Count > 0)
            {
                summary.AppendLine("**By Severity:**");
                foreach (var severityGroup in commentsBySeverity.OrderByDescending(g => g.Key))
                {
                    var icon = this.GetSeverityIcon(severityGroup.Key);
                    summary.AppendLine($"- {icon} **{severityGroup.Key}:** {severityGroup.Count()}");
                }
                summary.AppendLine();
            }

            // Category breakdown
            if (commentsByCategory.Count > 0)
            {
                summary.AppendLine("**By Category:**");
                foreach (var categoryGroup in commentsByCategory.OrderBy(g => g.Key.ToString()))
                {
                    var badge = this.GetCategoryBadge(categoryGroup.Key);
                    summary.AppendLine($"- {badge} **{categoryGroup.Key}:** {categoryGroup.Count()}");
                }
                summary.AppendLine();
            }

            // Metadata
            if (analysisResult.Metadata.TokensUsed > 0)
            {
                summary.AppendLine("**Analysis Details:**");
                summary.AppendLine($"- üî§ Tokens used: {analysisResult.Metadata.TokensUsed:N0}");
                summary.AppendLine($"- üìÅ Files analyzed: {analysisResult.Metadata.FilesAnalyzed}");
                summary.AppendLine($"- ‚è±Ô∏è Processing time: {analysisResult.Metadata.ProcessingTime.TotalSeconds:F2}s");
                if (!string.IsNullOrEmpty(analysisResult.Metadata.ModelUsed))
                {
                    summary.AppendLine($"- üß† Model: {analysisResult.Metadata.ModelUsed}");
                }
                summary.AppendLine();
            }

            summary.AppendLine("---");
            summary.AppendLine($"ü§ñ *Generated by AI Code Review* | Request ID: `{analysisResult.RequestId}`");

            return summary.ToString().Trim();
        }

        private string GetSeverityIcon(ReviewSeverity severity)
        {
            return severity switch
            {
                ReviewSeverity.Critical => "üö®",
                ReviewSeverity.Error => "‚ùå",
                ReviewSeverity.Warning => "‚ö†Ô∏è",
                ReviewSeverity.Info => "‚ÑπÔ∏è",
                _ => "üìù"
            };
        }

        private string GetCategoryBadge(ReviewCategory category)
        {
            return category switch
            {
                ReviewCategory.Security => "`üîí Security`",
                ReviewCategory.Performance => "`‚ö° Performance`",
                ReviewCategory.CodeQuality => "`‚ú® Code Quality`",
                ReviewCategory.Documentation => "`üìö Documentation`",
                ReviewCategory.Testing => "`üß™ Testing`",
                ReviewCategory.BestPractices => "`üí° Best Practices`",
                ReviewCategory.General => "`üìã General`",
                _ => "`üìù Review`"
            };
        }

        private List<string> GetDocumentationLinks(ReviewCategory category)
        {
            return category switch
            {
                ReviewCategory.Security => new List<string>
                {
                    "[OWASP Top 10](https://owasp.org/www-project-top-ten/)",
                    "[Microsoft Security Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/security/)"
                },
                ReviewCategory.Performance => new List<string>
                {
                    "[.NET Performance Tips](https://docs.microsoft.com/en-us/dotnet/framework/performance/)",
                    "[C# Performance Guidelines](https://docs.microsoft.com/en-us/dotnet/csharp/advanced-topics/performance/)"
                },
                ReviewCategory.CodeQuality => new List<string>
                {
                    "[C# Coding Conventions](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)",
                    "[Clean Code Principles](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/)"
                },
                ReviewCategory.Testing => new List<string>
                {
                    "[Unit Testing Best Practices](https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices)",
                    "[xUnit Documentation](https://xunit.net/docs/getting-started/netcore/cmdline)"
                },
                _ => new List<string>()
            };
        }
    }
}